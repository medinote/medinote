<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


	<!-- Root Context: defines shared resources visible to all other web components -->

	
	<context:annotation-config/>
	<!-- jdbc.properties파일을 로드한다. -->
	<context:property-placeholder location="classpath:mybatis/prop/db.properties"/>
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource">	
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" 		value="${jdbc.url}"/>
		<property name="username" 	value="${jdbc.user}"/>
		<property name="password" 	value="${jdbc.pwd}"/>
		<property name="maxActive" 	value="${jdbc.maxActive}"/>
		<property name="maxIdle" 	value="${jdbc.maxIdle}"/>
		<property name="minIdle" 	value="${jdbc.minIdle}"/>
	</bean>
	
	<!-- mybatis-spring에 이미 factory가 있다. -->
	<bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="mapperLocations" value="classpath:mybatis/mapper/*.xml" />

	</bean>
	
	<!-- 사실 여기서 SqlSessionTemplate을 생성하지만 우린 바로 DAO들을 정의하자! 
		이렇게 되면 DAO들 안에서 factory를 멤버로 잡아야 할 것 처럼 보이지만 Spring에서는 
		SqlSessionTemplate을 자체적으로 관리가 되므로 SqlSessionTemplate을 DAO에 넣고 사용해야 한다.-->
	<bean id="sst" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="factory"></constructor-arg>
	</bean>
	
	
	
	<!-- 컴포넌트 스캔을 사용하지 않을 경우는 아래와 같이 쓴다. -->
	<!-- 컴포넌트 스캔을 사용하면 해당 패키지 내에 dao가 있어야 한다. -->
	<bean id="loginDao" class="mybatis.dao.LoginDAO"/>
	
	
	<!-- DAO 클래스 위에 어떤 것을 명시 해야 component-scan이 동작한다. -->
	<!-- 클래스를 컴포넌트로 정의 해야 한다. -->
	
</beans>
